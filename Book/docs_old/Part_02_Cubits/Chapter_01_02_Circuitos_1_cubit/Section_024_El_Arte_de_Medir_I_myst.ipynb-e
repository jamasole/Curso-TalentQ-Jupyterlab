{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "> {sub-ref}`today` | {sub-ref}`wordcount-minutes` min read\n",
    "\n",
    "::::{figure} ../../figuras/logos/Logo_TalentQ_Azul.png\n",
    ":width: 150px\n",
    ":align: right\n",
    "::::\n",
    "\n",
    "\n",
    "# El arte de medir I\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "$ \\newcommand{\\bra}[1]{\\langle #1|} $\n",
    "$ \\newcommand{\\ket}[1]{|#1\\rangle} $\n",
    "$ \\newcommand{\\braket}[2]{\\langle #1|#2\\rangle} $\n",
    "$ \\newcommand{\\i}{{\\color{blue} i}} $ \n",
    "$ \\newcommand{\\tr}{{\\rm tr}} $\n",
    "$ \\newcommand{\\Hil}{{\\mathcal H}} $\n",
    "$ \\newcommand{\\boldn}{{\\bf n}} $\n",
    "$ \\newcommand{\\bn}{{\\bf n}} $\n",
    "$ \\newcommand{\\bsig}{\\boldsymbol{\\sigma}} $\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "%run ../../macro_tQ.py\n",
    "import sys\n",
    "sys.path.append('../../')\n",
    "import macro_tQ as tQ\n",
    "\n",
    "import numpy as np\n",
    "import scipy.linalg as la\n",
    "from IPython.display import display,Markdown,Latex\n",
    "import matplotlib.pyplot as plt\n",
    "from qiskit.visualization import array_to_latex"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "## Medidas de 1 cúbit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Medidas en la base computacional"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "source": [
    "El **aparato de medida estándar** en computación cuántica asigna valores $a = 0,1$ a los kets $\\ket{0}$ y $\\ket{1}$ de la base computacional\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "::::{figure} images/cubit_meter2.png\n",
    ":width: 250px\n",
    ":align: center\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "En general, el estado emergente es  ignorado (o destruido) en la medida. Es esos casos se omite el hilo cuántico a la salida\n",
    "\n",
    "::::{figure} images/cubit_meter1.png\n",
    ":width: 300px\n",
    ":align: center\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "La medida estándar es una *medida proyectiva* a la que asociamos el observable $Z = \\sigma_z $. \n",
    "\n",
    "$$\n",
    "Z\\ket{0} = +\\ket{0}~~~~,~~~~~ Z\\ket{1} = -\\ket{1}\n",
    "$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "o, de forma conjunta, con $~a=0,1$\n",
    "\n",
    "$$~Z\\ket{a} = (-1)^a\\ket{a}$$, \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tomografía Cuántica"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "source": [
    "Una repetición de medidas de un estado $\\ket{\\psi} = c_0\\ket{0} + c_1\\ket{1}$ permite tener acceso estadístico a las amplitudes de probabilidad \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "source": [
    "$$\n",
    "p(0) = \\frac{n_{0}}{N} = |c_0|^2 = |\\braket{0}{\\psi}|^2~~~~~~~~~~~~~~~~ p(1) = \\frac{n_{1}}{N}=|c_1|^2 =  |\\braket{1}{\\psi}|^2 \\, .\n",
    "$$\n",
    "<br>\n",
    "\n",
    "Este procedimiento de reconstrucción es la base de la **tomografía cuántica**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Definamos un vector aleatorio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "run_control": {
     "marked": false
    },
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$(0.216714078704 - 0.117923440841 i) |0\\rangle+(-0.586038870761 + 0.771807950302 i) |1\\rangle$$"
      ],
      "text/plain": [
       "<IPython.core.display.Latex object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 480x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from qiskit.quantum_info import Statevector\n",
    "from qiskit.visualization import plot_bloch_multivector, array_to_latex  \n",
    "\n",
    "psi_state= tQ.random_ket(2).reshape(2)\n",
    "display(Statevector(psi_state).draw('latex'))\n",
    "display(Statevector(psi_state).draw('Bloch'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Las probabilidades de obtener '0' y '1' son los cuadrados de las amplitudes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "run_control": {
     "marked": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p(0)= 0.06087 , p(1)= 0.93913\n"
     ]
    }
   ],
   "source": [
    "p0 = np.abs(psi_state[0])**2\n",
    "p1 = np.abs(psi_state[1])**2\n",
    "\n",
    "print('p(0)=', np.round(p0,5),', p(1)=', np.round(p1,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vamos a recuperarlas *experimentalmente* corriendo un circuito. Primero obtenemos el diccionario de cuentas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "run_control": {
     "marked": false
    },
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 519.897x200.667 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "counts_psi =  {'0': 600, '1': 9400}\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x500 with 1 Axes>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qiskit import QuantumCircuit\n",
    "from qiskit_aer import AerSimulator\n",
    "\n",
    "simulator = AerSimulator()\n",
    "\n",
    "'generamos un circuito en el que inicializamos el estado psi'\n",
    "qc_psi = QuantumCircuit(1,1)\n",
    "qc_psi.initialize(psi_state,0)\n",
    "qc_psi.measure(0,0)\n",
    "display(qc_psi.draw('mpl'))\n",
    "\n",
    "'ejecutamos un número de veces'\n",
    "nshots = 10000\n",
    "counts_psi = simulator.run(qc_psi,shots=nshots).result().get_counts()\n",
    "\n",
    "'visualizamos los reultados como un diccionario y  mediante un histograma'\n",
    "print('counts_psi = ',counts_psi)\n",
    "plot_histogram(counts_psi) # Mostramos un histograma de resultados"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Ahora podemos  calcular las frecuencias relativas $n_i/N$  y compararlas con las probabilidades $p(i)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "run_control": {
     "marked": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p(0)_exp = 0.060717   p(1)_exp =  0.939283\n"
     ]
    }
   ],
   "source": [
    "p0_exp = counts_psi['0']/nshots\n",
    "p1_exp = counts_psi['1']/nshots\n",
    "\n",
    "print('p(0)_exp =', p0_exp,'  p(1)_exp = ',p1_exp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "### Medidas en un ordenador cuántico real"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "\n",
    "\n",
    "Una vez que hemos verificado que el programa \n",
    "corre bien en nuestro simulador, podemos lanzarlo a un ordenador cuántico real sin más que cambiar el *backend*.\n",
    "\n",
    "Por el momento usaremos los ordenadores gratuitos de IBM. Para ello es necesario hacer una cuenta de usuario\n",
    "en https://quantum-computing.ibm.com/ \n",
    "\n",
    "Go to https://quantum-computing.ibm.com/account and get API-token in the MyAccount section. Copy token and paste in the following cell in between the brackets (after uncommenting the line)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#uncomment and paste your token\n",
    "#IBMQ.save_account('')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "After that, your token is saved in this computer. In order to load the account just type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "from qiskit import IBMQ\n",
    "# IBMQ.load_account()\n",
    "# provider = IBMQ.get_provider(hub='ibm-q')\n",
    "# provider.backends()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "antes de enviar un trabajo es conveniente consultar qué máquina de las adecuadas a nuestras necesidades es la que está más libre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "# from qiskit.providers.ibmq import least_busy\n",
    "# IBMQ_best_backend = least_busy(provider.backends(filters=lambda x: x.configuration().n_qubits >= 1 \n",
    "#                                       and not x.configuration().simulator \n",
    "#                                       and x.status().operational==True))\n",
    "# print(\"least busy backend: \", IBMQ_best_backend)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Ahora compilamos y enviamos el trabajo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "# qobj = transpile(qc_psi, IBMQ_best_backend)           # Compila el código para el backend\n",
    "# job = IBMQ_best_backend.run(qobj, shots=1024) # Hacemos la simulación 1024 veces "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "podemos monitorizar la ejecución"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "# from qiskit.tools.monitor import job_monitor\n",
    "# job_monitor(job)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "extraemos el resultado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "# counts = job.result().get_counts()\n",
    "# print(\"Cuentas=\",counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "# plot_histogram(counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "### Ejemplo: la moneda cuántica"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "El resultado de tirar una moneda al aire es una variable aleatoria binaria  equiprobable:  X = (cara,cruz). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Es irrelevante si analizamos el resultado cada tirada o cada dos, o tres tiradas. Las frecuencias relativas de caras y cruces, siempre serán próximas a $1/2$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Podemos imaginar un experimento similar con un cúbit, donde cara $\\to \\ket{0}$ y cruz $\\to\\ket{1}$ son los estados posibles de la medida en la base $Z$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Tirar la moneda  clásica es ponerla en un estado que puede ser cara o cruz al caer sobre la mesa \n",
    "\n",
    "Tirar la moneda cuántica  es aplicar el operador $H$  para poner cualquiera de los dos resultados en una superposición \n",
    "$H\\ket{0} = \\frac{1}{\\sqrt{2}}(\\ket{0} + \\ket{1})$ y $H\\ket{1} = \\frac{1}{\\sqrt{2}}(\\ket{0} - \\ket{1})$ \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Ahora no es lo mismo medir el resultado después de una tirada\n",
    "\n",
    "$$\n",
    "\\ket{0}~ \\stackrel{\\rm tirar}{\\longrightarrow} ~ H \\ket{0}= \\ket{+} ~ \\stackrel{\\rm medir}{\\longrightarrow} ~p(0) = p(1) = 0.5\n",
    "$$\n",
    "que hacerlo después de dos tiradas\n",
    "\n",
    "$$\n",
    "\\ket{0}~ \\stackrel{\\rm tirar}{\\longrightarrow} ~ H \\ket{0}~ \\stackrel{\\rm tirar}{\\longrightarrow} H^2\\ket{0} = \\ket{0} ~ \\stackrel{\\rm medir}{\\longrightarrow} ~p(0) = 1 ~,~p(1) = 0\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/dcb/Programs/miniconda/miniconda3/envs/qiskit_qibo_penny/lib/python3.11/site-packages/qiskit/visualization/circuit/matplotlib.py:266: FutureWarning: The default matplotlib drawer scheme will be changed to \"iqp\" in a following release. To silence this warning, specify the current default explicitly as style=\"clifford\", or the new default as style=\"iqp\".\n",
      "  self._style, def_font_ratio = load_style(self._style)\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 436.286x200.667 with 1 Axes>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(1,1)\n",
    "\n",
    "qc.h(0)\n",
    "qc.measure(0,0) #anula o no esta medición intermedia para ver la diferencia\n",
    "qc.h(0)\n",
    "qc.measure(0,0)\n",
    "qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Ejecutemos el circuito con y sin medición intermedia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'0': 525, '1': 499}"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M_simulator = Aer.get_backend('qasm_simulator')\n",
    "\n",
    "execute(qc,M_simulator).result().get_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "La medición intermedia destruye la superposición y hace colapsar el estado a $\\ket{0}$  ó $\\ket{1}$. \n",
    "\n",
    "Sin dicha medición, las amplitudes de probabilidad para obtener $\\ket{1}$ a partir de $\\ket{0}$ interfieren destructivamente"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Medidas en una base general"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "source": [
    "::::::{admonition} Nota (Recuerda) \n",
    ":class: note\n",
    "\n",
    "<center>\n",
    "No importa en qué dirección apunte el eje $\\hat{\\bf n} $ de un Stern-Gerlach \n",
    "<br>   \n",
    "<br>    \n",
    "$$~ \\Downarrow ~$$\n",
    "<br>\n",
    "a la salida <b>siempre</b> mediremos $\\pm 1$ (deflexión positiva o negativa)\n",
    "<br>\n",
    "<br>\n",
    "$$~ \\Downarrow ~$$\n",
    "<br>    \n",
    "si no se destruye, el estado posterior será $\\ket{\\pm,\\hat{\\bf n}}$ en cada caso\n",
    "</center>\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Supongamos que un estado $\\ket{\\psi}$ entra en el detector con un campo ${\\bf B}$ orientado en la dirección\n",
    "<br>\n",
    "\n",
    "$$\n",
    "\\hat\\bn(\\theta,\\phi) = \\sin\\theta\\cos\\phi \\, \\hat {\\bf x} + \\sin\\theta\\sin\\phi \\, \\hat {\\bf y} + \\cos\\theta \\, \\hat {\\bf z}\n",
    "$$\n",
    "<br>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "\n",
    "A la salida, el resultado $+1$ indicará que el $\\ket{\\psi}$ ha colapsado al estado\n",
    "\n",
    "$$\n",
    "\\ket{\\psi} \\stackrel{+}{\\longrightarrow} \\ket{+,\\hat\\bn} = ~\\begin{bmatrix} \\cos\\displaystyle\\frac{\\theta}{2} \\\\  ~e^{i\\phi}\\sin\\displaystyle\\frac{\\theta}{2} \\end{bmatrix} ~~~~~~~~,~~~~~\n",
    "~~~~~\\hbox{con probabilidad} ~~~~~ p_{\\hat\\bn}(+) = |\\braket{+,\\hat\\bn}{\\psi}|^2\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "A la salida, el resultado $-1$ indicará que el $\\ket{\\psi}$ ha colapsado al estado\n",
    "\n",
    "$$\n",
    "\\ket{\\psi} \\stackrel{-}{\\longrightarrow} \\ket{-,\\hat\\bn} =  \\begin{bmatrix} -e^{-i\\phi}\\sin\\displaystyle\\frac{\\theta}{2} \\\\  \\cos\\displaystyle\\frac{\\theta}{2} \\end{bmatrix} ~~~~~~~~,~~~~~\n",
    "~~~~~\\hbox{con probabilidad} ~~~~~ p_{\\hat\\bn}(-) = |\\braket{-,\\hat\\bn}{\\psi}|^2\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Para adaptar la discusión al *contexto computacional*, $\\ket{+}\\to \\ket{0}, \\ket{-}\\to \\ket{1}$  vamos a unificar la notación \n",
    "<br>\n",
    "<br>\n",
    "\n",
    "$$\n",
    "\\ket{+, \\hat{\\bf n}} \\to \\ket{0}_{\\hat{\\bf n}} ~~~~~,~~~~~\\ket{-, \\hat{\\bf n}}\\to  \\ket{1}_{\\hat{\\bf n}} \n",
    "$$\n",
    "<br>\n",
    "\n",
    "Con esta notación, la ecuación de autovalores\n",
    "\n",
    "$$\n",
    "\\hat {\\bf n} \\cdot \\boldsymbol{\\sigma}\\,  \\ket{\\pm, \\hat{\\bf n}} =  \\pm \\, \\ket{\\pm, \\hat{\\bf n}} \n",
    "$$\n",
    "\n",
    "se escribe \n",
    "\n",
    "$$\n",
    "\\hat {\\bf n} \\cdot \\bsig\\,  \\ket{a}_{\\hat{\\bf n}}~ =~   (-1)^a \\ket{a}_{\\hat{\\bf n}}~~~~~~a = 0,1\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Sea $~\\hat{\\bf z}\\cdot \\bsig ~$ el <u>*aparato de medida estandar*</u> orientado a lo largo del eje $~\\hat{\\bf z}$\n",
    "\n",
    "$$\n",
    " \\hat{\\bf z}\\cdot \\bsig \\,  \\ket{a}_{\\hat{\\bf z}} = (-1)^a\\ket{a}_{\\hat{\\bf z}} = Z \\ket{a} \n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "y  $~\\hat\\bn\\cdot \\bsig~$ el <u>aparato de medida orientado</u> a lo largo del eje $\\hat\\bn$\n",
    "\n",
    "\n",
    "$$\n",
    "\\hat\\bn\\cdot \\bsig \\,  \\ket{a}_{\\hat{\\bf n}} = (-1)^a\\ket{a}_{\\hat{\\bf n}}\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "ambas situaciones está  relacionadas mediante una simple *rotación*\n",
    "\n",
    "::::{figure} images/BlochSphere_basis.png\n",
    ":width: 300px\n",
    ":align: center\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "El operador que implementa esta rotación en el espacio $\\Hil = {\\mathbb C}^2$ de un cúbit es\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "$$\n",
    "U(\\hat {\\bf z}\\to \\hat \\bn) = U(\\theta,\\phi,0)=\\begin{bmatrix}   \\cos \\displaystyle\\frac{\\theta}{2}  & -  \\sin\\displaystyle\\frac{\\theta}{2}  \\\\ \n",
    "\\rule{0mm}{4mm} e^{i\\phi} \\sin \\displaystyle\\frac{\\theta}{2} &e^{i\\phi} \\cos \\displaystyle\\frac{\\theta}{2} \\end{bmatrix}\n",
    "$$\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "que implementa el  *cambio de base* $\\{\\ket{a}_{\\hat{\\bf z}}\\}$ a la base $\\{\\ket{a}_{\\hat{\\bf n}}\\}, ~a = 0,1$ \n",
    "<br>\n",
    "<br>\n",
    "$$\n",
    "\\ket{0}_{\\hat\\boldn} = U \\ket{0}_{\\hat{\\bf z}}~~~~~~,~~~~~~\n",
    "\\ket{1}_{\\hat\\boldn} = U \\ket{1}_{\\hat{\\bf z}}\n",
    "$$\n",
    "<br>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "es decir \n",
    "\n",
    "$$ \n",
    "\\begin{bmatrix} \\cos\\theta \\\\ e^{i\\phi}\\sin\\theta \\end{bmatrix} = U\\cdot \\begin{bmatrix}1\\\\0 \\end{bmatrix} ~~~~~~~,~~~~~~~\n",
    "\\begin{bmatrix} -\\sin\\theta \\\\ e^{i\\phi}\\cos\\theta \\end{bmatrix} = U\\cdot \\begin{bmatrix}0\\\\1 \\end{bmatrix}  \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Si las componentes de los vectores rotan en la forma $\\ket{a}_{\\hat{\\bf n}} = U\\ket{a}_{\\hat{\\bf z}}$\n",
    "los observables asociados a los  aparatos de *Stern Gerlach*: *original* $\\to \\hat {\\bf z} \\cdot \\bsig~$, y *rotado*$\\to\\hat {\\bf n} \\cdot \\bsig~ $, se relacionan algebraicamente *como lo hace cualquier operador*\n",
    "\n",
    "$$\n",
    "\\hat {\\bf n} \\cdot \\bsig =  U \\, (\\hat {\\bf z} \\cdot \\bsig)\\,  U^\\dagger\n",
    "$$\n",
    "<details><summary><p> >> <i>Verificamos la consistencia</i>  </p></summary>\n",
    "\\begin{eqnarray}\n",
    "\\hat {\\bf n} \\cdot \\bsig\\,  \\ket{a}_{\\hat{\\bf n}} ~~&=&~~ \n",
    "U~ \\hat {\\bf z} \\cdot \\bsig ~  U^\\dagger ~ U  \\ket{a}_{\\hat{\\bf z}}\\\\  \\rule{0mm}{8mm}\n",
    "&=& U~ \\hat {\\bf z} \\cdot \\bsig ~   \\ket{a}_{\\hat{\\bf z}}\\\\   \\rule{0mm}{8mm}\n",
    "&=& U\\, Z \\ket{a} = U (-1)^a \\ket{a}_{\\hat{\\bf z}} \\\\  \\rule{0mm}{8mm}\n",
    "&=&  (-1)^a U\\ket{a}_{\\hat{\\bf z}} \\\\  \\rule{0mm}{8mm}\n",
    "&=& (-1)^a \\ket{a}_{\\hat{\\bf n}}  \\rule{0mm}{8mm}\n",
    "\\end{eqnarray}\n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "\n",
    "verifica esta ecuación operando\n",
    "\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "El circuito siguiente  *simula* un aparato de medición en la base $\\{\\ket{a}_{\\hat{\\bf n}}\\}$\n",
    "obtenido mediante la rotación del aparato de medida en la base $\\{\\ket{a}_{\\hat{\\bf n}}\\}$ de autoestados de $Z$ \n",
    "\n",
    "\n",
    "::::{figure} images/nbasis_measure2.png\n",
    ":width: 500px\n",
    ":align: center\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "::::::{admonition} Nota\n",
    ":class: note\n",
    "\n",
    "\n",
    "<br>\n",
    "Recuerda que el orden de la composición de operadores se invierte al plasmarlos en un circuito\n",
    "\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Ejemplo: bases $X$, $Y$ y $Z$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "La base computacional es la base de autoestados de $Z$  \n",
    "\n",
    "$$\\{\\ket{0},\\ket{1} \\} = \\{\\ket{0}_{\\hat{\\bf z}},\\ket{1}_{\\hat{\\bf z}}\\}$$\n",
    "<br>\n",
    "\n",
    "Muy frecuentes son otras bases ortonormales como la base de autoestados de $X$\n",
    "<br>\n",
    "\n",
    "$$ \\{\\ket{+},\\ket{-}\\}  = \\{\\ket{0}_{\\hat{\\bf x}},\\ket{1}_{\\hat{\\bf x}}\\} $$\n",
    "\n",
    "o la base de autoestados de $Y$\n",
    "\n",
    "$$ \\{\\ket{+i},\\ket{-i}\\}  = \\{\\ket{0}_{\\hat{\\bf y}},\\ket{1}_{\\hat{\\bf y}}\\} $$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "source": [
    "Para construir un medidor asociado a las bases $X$ e $Y$ sólo es necesario *rotar* el aparato de medida estándar asociado a la base $Z$ \n",
    "<br>\n",
    "<br>\n",
    "\n",
    "$$ \\ket{\\pm} =  \\ket{a}_{\\hat{\\bf x}} =  H \\ket{a}_{\\hat{\\bf z}} ~~~~ $$\n",
    "<br>\n",
    "$$ \\ket{\\pm i} = \\ket{a}_{\\hat{\\bf y}} =  SH \\ket{a}_{\\hat{\\bf z}} $$  \n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "Comprueba  que estas ecuaciones de cambio de base son correctas\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Con estas relaciones podemos realizar medidas asociadas a dichas bases\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "$$\n",
    "\\hat {\\bf x} \\cdot \\bsig =  H \\, (\\hat {\\bf z} \\cdot \\bsig)\\,  H\n",
    "$$\n",
    "<br>\n",
    "\n",
    "\n",
    "$$\n",
    "\\hat {\\bf y} \\cdot \\bsig =  SH \\, (\\hat {\\bf z} \\cdot \\bsig)\\,  HS^\\dagger\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "los circuitos que implementan la rotación de estos operadores \n",
    "\n",
    "\n",
    "::::{figure} images/meter_xybasis.png\n",
    ":width: 700px\n",
    ":align: center\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "que nos permiten definir  *aparatos de medida rotados* en las direcciones $x$ e $y$\n",
    "\n",
    "\n",
    "::::{figure} images/meter_xybasis2.png\n",
    ":width: 700px\n",
    ":align: center\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Cuando sólo nos interesa el resultado de la medida, y no el estado posterior al que ha colapsado no es necesario añadir los operadores posteriores al observable $Z$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "En la figura observamos el resultado de hacer pasar una nube de electrones a través de tres detectores de Stern Gerlach perpendiculares.\n",
    "<br>\n",
    "<br>\n",
    "    \n",
    "![picture](https://upload.wikimedia.org/wikipedia/commons/c/cb/Stern-Gerlach_Analyzer_Sequential_Series_E3.png \"blog-image align\")\n",
    "    \n",
    " Reproduce ese experimento en un circuito. Toma el eje $Y$ como eje de propagación orienta los detectores sucesivamente a lo largo de $Z$, y $X$ y $Z$ de nuevo. \n",
    "    \n",
    "Ejecuta el circuito lanzando los electrones de 1 en 1 en un estado inicial arbitrario y observa los resultados intermedios. \n",
    "    \n",
    "Lanza ahora una nube de electrones y observa la estadística    \n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "run_control": {
     "marked": false
    },
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 770.731x200.667 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{'110': 1}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'solucion'\n",
    "qc = QuantumCircuit(1,3)\n",
    "\n",
    "qc.h(0)\n",
    "\n",
    "qc.measure(0,2)\n",
    "\n",
    "qc.barrier()\n",
    "qc.h(0)\n",
    "qc.measure(0,1)\n",
    "qc.h(0)\n",
    "qc.barrier()\n",
    "\n",
    "qc.measure(0,0)\n",
    "\n",
    "display(qc.draw('mpl'))\n",
    "\n",
    "execute(qc,M_simulator,shots=1).result().get_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "\n",
    "Definamos una función que ejecuta medidas en cualquiera de los tres ejes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "run_control": {
     "marked": false
    },
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "def measure_XYZ(qc,axis=\"Z\",shots=1024):\n",
    "    'needs execute'\n",
    "    import copy \n",
    "    qc0 = copy.deepcopy(qc)\n",
    "    if axis == \"Z\":\n",
    "        qc0.measure(0,0)\n",
    "    if axis == \"X\":\n",
    "        qc0.h(0)\n",
    "        qc0.measure(0,0) \n",
    "        qc0.h(0)\n",
    "    elif axis == \"Y\":\n",
    "        qc0.sdg(0)\n",
    "        qc0.h(0)\n",
    "        qc0.measure(0,0) \n",
    "        qc0.h(0)\n",
    "        qc0.s(0)\n",
    "        \n",
    "    counts=execute(qc0,backend=Aer.get_backend('qasm_simulator'),shots=shots).result().get_counts()\n",
    "    \n",
    "    return counts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Ahora podemos observar el resultado de medidas sucesivas a lo largo de ejes diferentes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "run_control": {
     "marked": false
    },
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 185.453x200.667 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuentas(base Z)= {'1': 4943, '0': 5057}\n",
      "cuentas(base X)= {'0': 10000}\n",
      "cuentas( base Y)= {'1': 4999, '0': 5001}\n"
     ]
    }
   ],
   "source": [
    "shots = 10000\n",
    "\n",
    "qc = QuantumCircuit(1,1)\n",
    "qc.h(0)\n",
    "display(qc.draw('mpl'))\n",
    "\n",
    "cuentasz = measure_XYZ(qc,axis=\"Z\",shots=shots)\n",
    "print(\"cuentas(base Z)=\",cuentasz)\n",
    "\n",
    "cuentasx = measure_XYZ(qc,axis=\"X\",shots=shots)\n",
    "print(\"cuentas(base X)=\",cuentasx)\n",
    "\n",
    "cuentasy = measure_XYZ(qc,axis=\"Y\",shots=shots)\n",
    "print(\"cuentas( base Y)=\",cuentasy)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Valores esperados"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "source": [
    "Cualquier *observable* sobre un cúbit $A = A^\\dagger$ puede expresarse en la base $\\sigma_i = \\{I,X,Y,Z\\}, \\, i=0,1,2,3$\n",
    "\n",
    "$$\n",
    "A = a_0 I + a_1 X + a_2 Y  + a_3 Z \\, . \n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Los coeficientes se obtienen haciendo uso de la relación $\\to \\frac{1}{2}\\tr\\,  (\\sigma_i \\sigma_j) = \\delta_{ij}$. Es decir\n",
    "\n",
    "$$\n",
    "a_i = \\frac{1}{2} \\tr \\, (A \\sigma_i)\n",
    "$$\n",
    "\n",
    "donde $ (\\sigma_0,\\sigma_1,\\sigma_2,\\sigma_3) = (I,X,Y,Z).$\n",
    "<br>\n",
    "<br>\n",
    "    \n",
    "<details><summary><p  > >> <i>Comprobación</i> </p></summary>\n",
    "$$\n",
    "\\frac{1}{2} \\tr \\, (A \\sigma_i) = \\frac{1}{2} \\tr \\, \\left((\\sum_{j=0}^3 a_j \\sigma_j) \\sigma_i\\right)\n",
    "= \\sum_{j=0}^3 a_j \\, \\frac{1}{2} \\tr ( \\sigma_j \\sigma_i) = \\sum_{j=0}^3 a_j \\delta_{ji} = a_i\n",
    "$$\n",
    "    \n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Entonces, podremos obtener el valor esperado de $A$  si somos capaces de medir los de $X,$ $Y$ y $Z$.\n",
    "\n",
    "\\begin{eqnarray*}\n",
    "\\langle A\\rangle_\\psi =\\bra{\\psi}A\\ket{\\psi} &=& \n",
    "\\bra{\\psi} a_0 I + a_1 X + a_2 Y  + a_3 Z \\ket{\\psi} \\\\ \\rule{0mm}{6mm}\n",
    "&=& a_0 + a_1 \\langle X\\rangle_\\psi + a_2 \\langle Y\\rangle_\\psi + a_3 \\langle Z\\rangle_\\psi\n",
    "\\end{eqnarray*}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculo del $\\langle X\\rangle_\\psi$, $\\langle Y\\rangle_\\psi$ y $\\langle Z\\rangle_\\psi$\n",
    "\n",
    "Comenzamos inicializando el circuito en un estado $\\ket{\\psi}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$(-0.6040162662 + 0.5290594497 i) |0\\rangle+(-0.280957504 - 0.5256646553 i) |1\\rangle$$"
      ],
      "text/plain": [
       "<IPython.core.display.Latex object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 436.286x200.667 with 1 Axes>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "psi_state= tQ.random_ket(2).reshape(2)\n",
    "display(Statevector(psi_state).draw('latex'))\n",
    "qc_psi = QuantumCircuit(1,1)\n",
    "qc_psi.initialize(psi_state,0)\n",
    "qc_psi.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "- $\\langle Z \\rangle_{\\psi}$\n",
    "\n",
    "Los estados de la base computacional son autoestados del operador $Z$ con autovalor $\\pm 1$\n",
    "<br>\n",
    "\n",
    "$$\n",
    "Z \\ket{0} =+ \\ket{0}   ~~~~~~~~~~~~~~~~~~~~~ Z \\ket{1} =-\\ket{1} \n",
    "$$\n",
    "<br>\n",
    "\n",
    "Dado un estado $\\ket{\\psi} = c_0\\ket{0} + c_1\\ket{1}$, la medida repetida arroja de forma aleatoria los valores propios de $Z \\to \\pm 1$ con frecuencias relativas \n",
    "<br>\n",
    "<br>\n",
    "$$(+1)\\to n^Z_0 ~~~~~~~~~~~~~~~~~~~~~~~~ (-1)\\to n^Z_1$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Por definición, el valor medio de dicha variable es, \n",
    "\n",
    "\\begin{eqnarray*}\n",
    "\\langle Z \\rangle_\\psi = \\bra{\\psi} Z \\ket{\\psi} \n",
    "&=& \\left( c^Z_0\\bra{0} + c^Z_1\\bra{1}\\right) Z\\left( c^Z_0\\ket{0} + c^Z_1\\ket{1}\\right)  \\nonumber \\\\  \\rule{0mm}{10mm}\n",
    "&=& (+1) |c^Z_0|^2 + (-1) |c^Z_1|^2    \\nonumber \\\\  \\rule{0mm}{10mm}\n",
    "&=& +\\frac{n^Z_0}{N}- \\frac{ n^Z_1}{N}\n",
    "\\end{eqnarray*}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Para medir autovalores de $\\langle Z\\rangle_\\psi$ el circuito es el más simple\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "\n",
    "::::{figure} images/cubit_meter1.png\n",
    ":width: 300px\n",
    ":align: center\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 519.897x200.667 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{'1': 3594, '0': 6406}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "'añadimos el medidor, trabajaremos con una copia del circuito'\n",
    "import copy\n",
    "qc_psi_copy = copy.deepcopy(qc_psi)\n",
    "qc_psi_copy.measure(0,0)\n",
    "display(qc_psi_copy.draw('mpl'))\n",
    "\n",
    "shots = 10000\n",
    "counts_psi = execute(qc_psi_copy,M_simulator,shots = shots).result().get_counts()\n",
    "display(counts_psi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora que tenemos las frecuencias relativas de los autovalores $\\pm 1$ de $Z$, podemos calcular los valores medios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Z> = 0.2812\n"
     ]
    }
   ],
   "source": [
    "mean_Z = 0\n",
    "\n",
    "for bits, counts  in counts_psi.items():\n",
    "    mean_Z += (-1)**(int(bits))* (counts/shots)\n",
    "\n",
    "print('<Z> =',np.round(mean_Z,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "- $\\langle X \\rangle_{\\psi}$\n",
    "\n",
    "En la base $X$, **el mismo estado** de entrada se escribirá con otras componentes $\\ket{\\psi} = c_0^X\\ket{+} + c_1^X\\ket{-}$.\n",
    "\n",
    "Si ahora medimos $\\ket{\\psi}$ en la base $X$, la repetición arrojará  una muestra aleatoria de autovalores de $X\\to \\pm 1$ con frecuencias \n",
    "\n",
    "$$~(+1)\\to n^X_0  ~~~~~~~~~~~~~~~~~~~ (-1)\\to n^X_1  $$\n",
    "\n",
    "El valor esperado de $X$  se obtiene del promedio de frecuencias *relativas*\n",
    "\n",
    "$$\n",
    "\\langle X \\rangle_\\psi ~= (+1)|c_0^X|^2 +(-1)|c_1^X|^2 ~=~ +\\frac{n^X_0}{N}- \\frac{ n^X_1}{N}\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Ya hemos visto cuál es el circuito necesario para  medir en la base $X$ \n",
    "<br>\n",
    "<br>\n",
    "\n",
    "::::{figure} images/cubit_meter_xbasis.png\n",
    ":width: 400px\n",
    ":align: center\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "En un estado arbitrario, $\\ket{\\psi}$, y calcula el valor esperado $\\langle X\\rangle_\\psi = \\bra{\\psi}X\\ket{\\psi}$\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "- $\\langle Y \\rangle_{\\psi}$\n",
    "\n",
    "\n",
    "Igualmente, si medimos el estado $\\ket{\\psi} = c_0^Y\\ket{+i} + c_1^Y\\ket{-i}$ con un medidor asociado al operador $Y = SHZHS^\\dagger$, la repetición arrojará  una muestra aleatoria de valores propios de $Y\\to \\pm 1$ con frecuencias relativas $+1\\to n^Y_0$ y $-1\\to n^Y_1$. Entonces\n",
    "\n",
    "$$\n",
    "\\langle Y \\rangle_\\psi = +\\frac{n^Y_0}{N}- \\frac{ n^Y_1}{N}\\, .\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "Circuito necesario para medir en la base $ Y$ \n",
    "<br>\n",
    "\n",
    "::::{figure} images/cubit_meter_ybasis.png\n",
    ":width: 400px\n",
    ":align: center\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "Calcula el valor esperado $\\langle Y\\rangle_\\psi = \\bra{\\psi}Y\\ket{\\psi}$\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "Genera un observable arbitrario $A$ y calcula el valor esperado $\\bra{\\psi}A\\ket{\\psi}$\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "### Valor esperado de un operador unitario"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Supongamos que sabemos cómo preparar, mediante un circuito, el estado $\\ket{\\psi}$ a partir del estado $\\ket{0}$. \n",
    "\n",
    "$$\\ket{\\psi} = U\\ket{0}$$\n",
    "\n",
    "En este caso, podemos calcular el valor esperado de cualquier operador unitario $V$ de la siguiente forma\n",
    "\n",
    "$$\n",
    "\\bra{\\psi}V\\ket{\\psi} = \\bra{0} U^\\dagger V U\\ket{0} = \\braket{0}{\\tilde \\psi}\n",
    "$$\n",
    "\n",
    "donde $$\\ket{\\tilde\\psi} \\equiv U^\\dagger V U\\ket{0}$$ \n",
    "\n",
    "y la acción del operador unitario $U^\\dagger V U$ se realiza mediante una composición de circuitos inicializada en $\\ket{0}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    " Midiendo $\\ket{\\tilde \\psi}$  en la base $Z$, la fracción relativa de resultados $0\\to  n_0/N$ nos da acceso al *módulo del valor esperado*, \n",
    " \n",
    "$$\n",
    "\\sqrt{ \\frac{n_{0}(\\tilde\\psi)}{N} } ~=~  \\sqrt{p_0}  ~=~   | \\braket{0}{\\tilde \\psi}|  ~=~ |\\bra{\\psi}V\\ket{\\psi}|   \n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "::::::{card} \n",
    "\n",
    "\n",
    "Circuito necesario para medir $\\langle V\\rangle_{\\psi} $ donde $\\ket{\\psi} = U\\ket{0}$ es un estado preparable\n",
    "<br>\n",
    "<br>\n",
    "::::{figure} images/vev_unitary_V.png\n",
    ":width: 500px\n",
    ":align: center\n",
    "::::\n",
    "\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Si $V$ además de ser <i>unitario</i>, fuese <i>hermítico</i>, entonces tendríamos acceso al valor esperado completo, al tratarse de una cantidad real. \n",
    "\n",
    "\n",
    "Operadores de 1 cúbit unitarios y hermíticos son, por ejemplo, los operadores \n",
    "$V = X,Y,Z,H$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Este argumento nos permite calcular de otra manera \n",
    "\n",
    "$$\n",
    "\\left. \n",
    "\\begin{array}{c} \\langle Z\\rangle_\\psi \\\\ \\rule{0mm}{8mm} \\langle X\\rangle_\\psi \\\\ \\rule{0mm}{8mm} \\langle Y\\rangle_\\psi \\end{array}\n",
    "\\right\\} ~=~\\braket{0}{\\tilde\\psi} ~=~ \\sqrt{\\frac{n_{0}(\\tilde\\psi)}{N}} ~~~\\hbox{con}~~~~\n",
    "\\left\\{ \n",
    "\\begin{array}{l}  \\ket{\\tilde \\psi} = U^\\dagger  Z  U\\ket{0} \\\\ \\rule{0mm}{8mm} \\ket{\\tilde \\psi} = U^\\dagger H Z H U\\ket{0}  \\\\ \\rule{0mm}{8mm}  \\ket{\\tilde \\psi} = U^\\dagger SH Z HS^\\dagger U\\ket{0} \\end{array}\n",
    "\\right.\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Como vemos, ganamos en facilidad de cálculo pero perdemos información acerca del signo de $\\langle V\\rangle_\\psi$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "Calcula por este procedimiento los valores de  $\\langle X\\rangle_\\psi$, $\\langle Y\\rangle_\\psi$ y $\\langle Z\\rangle_\\psi$ encontrados anteriormente y verifica que obtienes el mismo resultado. \n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "run_control": {
     "marked": true
    },
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 436.286x200.667 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<A> = 0.53823\n"
     ]
    }
   ],
   "source": [
    "#from qiskit.circuit.library.standard_gates import U3Gate\n",
    "M_simulator = Aer.get_backend('qasm_simulator')\n",
    "\n",
    "'definimos un estado arbitrario en la esfera de Bloch'\n",
    "theta = 1.  #rad\n",
    "phi   = 2.  #rad\n",
    "\n",
    "' el operador unitario que lo genera a partir de |0> es u(theta, phi, 0,0)'\n",
    "qc_Upsi = QuantumCircuit(1,1)\n",
    "qc_Upsi.u(theta,phi,0,0)\n",
    "qc_Upsi.z(0)\n",
    "#qc_Upsi.x(0)\n",
    "#qc_Upsi.y(0)\n",
    "qc_Upsi.u(-theta,0,-phi,0)\n",
    "\n",
    "qc_Upsi.measure(0,0)\n",
    "\n",
    "display(qc_Upsi.draw('mpl'))\n",
    "\n",
    "' ejecutamos '\n",
    "shots= 100000\n",
    "counts=execute(qc_Upsi,backend=M_simulator,shots=shots).result().get_counts()\n",
    "\n",
    "' ahora solo nos interesa la fracción de 0s '\n",
    "mean_A = np.sqrt(counts['0']/shots)\n",
    "print('<A> =',np.round(mean_A,5))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "414.053px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
