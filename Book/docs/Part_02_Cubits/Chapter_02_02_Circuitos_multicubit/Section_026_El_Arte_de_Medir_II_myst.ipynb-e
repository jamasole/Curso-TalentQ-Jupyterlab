{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "> {sub-ref}`today` | {sub-ref}`wordcount-minutes` min read\n",
    "\n",
    "::::{figure} ../../figuras/logos/Logo_TalentQ_Azul.png\n",
    ":width: 150px\n",
    ":align: right\n",
    "::::\n",
    "\n",
    "# El arte de medir II\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "$ \\newcommand{\\bra}[1]{\\langle #1|} $\n",
    "$ \\newcommand{\\ket}[1]{|#1\\rangle} $\n",
    "$ \\newcommand{\\braket}[2]{\\langle #1|#2\\rangle} $\n",
    "$ \\newcommand{\\i}{{\\color{blue} i}} $ \n",
    "$ \\newcommand{\\Hil}{{\\mathcal H}} $\n",
    "$ \\newcommand{\\boldn}{{\\bf n}} $\n",
    "$ \\newcommand{\\tr}{{\\rm tr}}$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "%run ../../macro_tQ.py\n",
    "import sys\n",
    "sys.path.append('../../')\n",
    "import macro_tQ as tQ\n",
    "\n",
    "import numpy as np\n",
    "import scipy.linalg as la\n",
    "from IPython.display import display,Markdown,Latex\n",
    "import matplotlib.pyplot as plt\n",
    "from qiskit.tools.visualization import array_to_latex"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "## Medidas de estados multicúbit\n",
    "\n",
    "Un aparato de medida en la base  asociada al operador hermítico $\\sigma_z^{\\otimes n} = Z\\otimes \\ldots \\otimes Z$ hace colapsar el estado  que mide a un elemento $\\ket{x}$ de la *base computacional*, que identificamos mediante una cadena de bits $a_{n-1}...a_0$ con $a_i=0,1$,  donde $x= a_{n-1}2^{n-1}+...+2^0 a_0$.\n",
    "\n",
    "<br>\n",
    "::::{figure} images/Multimeter_zbasis.png\n",
    ":width: 400px\n",
    ":align: center\n",
    "\n",
    "::::\n",
    "\n",
    "### Circuitos con múltiples cúbits y medidas en Qiskit\n",
    "\n",
    "Inicialicemos un estado de 3 cúbits \n",
    "\n",
    "$$\n",
    "\\ket{\\psi} = \\sum_{i,j,k = 0,1} c_{ijk} \\ket{ijk} = \\sum_a c_a \\ket{a}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\frac{1}{4} |000\\rangle- \\frac{1}{2} |001\\rangle- \\frac{1}{2} |010\\rangle+\\frac{1}{4} |011\\rangle+\\frac{1}{4} |100\\rangle+\\frac{1}{2} |110\\rangle- \\frac{1}{4} |111\\rangle$$"
      ],
      "text/plain": [
       "<IPython.core.display.Latex object>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister\n",
    "from numpy import linalg as la\n",
    "from qiskit.quantum_info import Statevector\n",
    "\n",
    "'''definimos un estado de entrada en H^3$'''\n",
    "psi =[1.,-2, -2,1,1,0,2,-1]\n",
    "psi/=la.norm(psi)\n",
    "#psi = tQ.random_ket(8).reshape(8)\n",
    "\n",
    "\n",
    "Statevector(psi).draw('Latex')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Las medida es esencialmente un mapa entre n-cúbits cuánticos y n-bits clásicos.\n",
    "\n",
    "$$\n",
    "\\ket{i_{n-1} i_{n-2}\\, ... \\, i_0} ~~\\longrightarrow ~~ i_{n-1}i_{n-2}...i_0\\in \\{0,1\\}^n\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "run_control": {
     "marked": false
    },
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/envs/nbclassic/lib/python3.9/site-packages/qiskit/visualization/circuit/matplotlib.py:266: FutureWarning: The default matplotlib drawer scheme will be changed to \"iqp\" in a following release. To silence this warning, specify the current default explicitly as style=\"clifford\", or the new default as style=\"iqp\".\n",
      "  self._style, def_font_ratio = load_style(self._style)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 801.182x367.889 with 1 Axes>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qr = QuantumRegister(3,name='qr')\n",
    "cr = ClassicalRegister(3,name='cr')\n",
    "\n",
    "qc = QuantumCircuit(qr,cr)\n",
    "qc.initialize(psi,qr)\n",
    "\n",
    "\n",
    "qc.measure(qr,cr)\n",
    "#qc.measure(qr,reversed(list(cr)))  # esta opcion invierte la asignación de bits clasicos a cúbits\n",
    "#qc.measure([qr[0],qr[1]],[cr[1],cr[2]])\n",
    "\n",
    "qc.draw(output='mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "La manera de tener acceso a las amplitudes (tomografía del estado) es midiendo repetidas veces para reconstruir la función de probabilidad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cuentas= {'100': 6288, '110': 25025, '001': 24949, '010': 24862, '000': 6295, '111': 6379, '011': 6202}\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x500 with 1 Axes>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qiskit_aer import AerSimulator \n",
    "nshots = 100000\n",
    "\n",
    "\n",
    "'ejecutamos el circuito'\n",
    "job=AerSimulator().run(qc,shots=nshots) \n",
    "result=job.result()\n",
    "counts = result.get_counts()        \n",
    "print('Cuentas=',counts) #diccionario de cuentas\n",
    "\n",
    "\n",
    "from qiskit.tools.visualization import plot_histogram\n",
    "plot_histogram(counts) # Mostramos un histograma de resultados"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Ahora podemos generar diccionarios con las probabilidades y la amplitudes de los distintos resultados, para obtener la tomografía del estado "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Probabilidades = {'001': 0.24928, '110': 0.25013, '100': 0.06317, '000': 0.06254, '010': 0.24997, '011': 0.06289, '111': 0.06202}\n"
     ]
    }
   ],
   "source": [
    "def get_probs(counts): # frecuencias_dict es un diccionario con la estadística de resultados\n",
    "   \n",
    "    prob_dict=counts.copy() # vamos a modificar el diccionario \"cuentas\" con las probabilidades \n",
    "    keys = list(counts.keys())\n",
    "    values = list(counts.values())\n",
    "    \n",
    "    N=sum(values)\n",
    "    probabilidades = [v/N for v in values] # lista de frecuencias relativas\n",
    " \n",
    "    for i in range(len(keys)):\n",
    "        prob_dict[keys[i]]= probabilidades[i]\n",
    "    \n",
    "    return  prob_dict\n",
    "\n",
    "probs  = get_probs(counts)\n",
    "\n",
    "print(\"Probabilidades =\",probs )\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Medidas en bases generales\n",
    "\n",
    "Vamos a suponer que queremos medir en una base ortonormal arbitraria $\\{\\ket{ x}'\\}$, $x=0,...,2^n-1$. \n",
    "\n",
    "$\\Rightarrow~ $ buscamos un circuito que, a la llegada de un vector  concreto de la base $\\ket{x}'=\\ket{i_{n-1}...i_0}'$, devuelva exactamente *la  colección* de bits:  $~i_{n-1}...i_0$.\n",
    "\n",
    "Vamos a suponer que conocemos el operador unitario que relaciona esta base con la  base computacional  \n",
    "\n",
    "$$\\ket{ x}'= U\\ket{x}~~~~~~\\Longrightarrow ~~~~~~   U^\\dagger\\ket{x}' = \\ket{ x}  \\, .$$\n",
    "\n",
    "\n",
    "Entonces es evidente que sólo tenemos que añadir el operador $U^\\dagger$ antes de usar el medidor estándar \n",
    "\n",
    "\n",
    "<br>\n",
    "\n",
    "\n",
    "::::{figure} images/Multimeter_basis.png\n",
    ":width: 400px\n",
    ":align: center\n",
    "\n",
    "::::\n",
    "\n",
    "<br>\n",
    "\n",
    "### Medidas  de Pauli\n",
    "\n",
    "En caso más frecuente consiste en medir diferentes cúbits en diferentes bases de Pauli, $X$, $Y$ ó $Z$.\n",
    "En este caso, $U= R_1\\otimes \\ldots \\otimes R_n$ es un producto de *rotaciones locales*, $Z\\to X$ ó $Z\\to Y$\n",
    "\n",
    "Por ejemplo el siguiente circuito mide en la base $Z_0X_1Y_2$\n",
    "\n",
    "<br>\n",
    "\n",
    "::::{figure} images/XYZ_multimeter.png\n",
    ":width: 250px\n",
    ":align: center\n",
    "\n",
    "::::\n",
    "\n",
    "\n",
    "Definamos una función que añade aparatos de medida en bases $X$, $Y$ ó $Z$ a partir de una *cadena* como 'xxy' etc "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/envs/nbclassic/lib/python3.9/site-packages/qiskit/visualization/circuit/matplotlib.py:266: FutureWarning: The default matplotlib drawer scheme will be changed to \"iqp\" in a following release. To silence this warning, specify the current default explicitly as style=\"clifford\", or the new default as style=\"iqp\".\n",
      "  self._style, def_font_ratio = load_style(self._style)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 454.719x451.5 with 1 Axes>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def add_multimeasure_XYZ(qc,paulistring):\n",
    "\n",
    "    assert(qc.num_qubits==len(paulistring)) #check whether width of circuit coincides with length of Pauli string\n",
    "\n",
    "    for i,basis in enumerate(reversed(paulistring)):\n",
    "        if  basis == 'X':\n",
    "            qc.h(i)    \n",
    "            qc.measure(i, i)\n",
    "        elif basis == 'Z':\n",
    "            qc.measure(i, i)\n",
    "            pass    \n",
    "        elif basis == 'Y':\n",
    "            qc.sdg(i)\n",
    "            qc.h(i)\n",
    "            qc.measure(i, i)\n",
    "\n",
    "    return qc \n",
    "\n",
    "'Veamos un ejemplo'\n",
    "from qiskit import QuantumCircuit\n",
    "qc = QuantumCircuit(4,4)\n",
    "add_multimeasure_XYZ(qc,'ZYIX')  # probar a cambiar el aparato de medida\n",
    "qc.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Medida de Bell\n",
    "\n",
    "El circuito \n",
    "\n",
    "::::{figure} images/Bell_basis.png\n",
    ":width: 200px\n",
    ":align: center\n",
    "\n",
    "::::\n",
    "\n",
    "<br>\n",
    "\n",
    " genera la <i>base de Bell</i> $\\ket{B_{xy}} = \\ket{xy}_B $ a partir de la <i>base computacional</i> $\\{\\ket{xy}\\}$ \n",
    "\n",
    "$$\n",
    "\\begin{array}{rcl}\n",
    "\\ket{00}_B &=& \\frac{1}{\\sqrt{2}} \\big( \\ket{00} + \\ket{11} \\big) \\\\\n",
    "\\ket{01}_B &=& \\frac{1}{\\sqrt{2}} \\big( \\ket{01} + \\ket{10} \\big) \\\\\n",
    "\\ket{10}_B &=& \\frac{1}{\\sqrt{2}} \\big( \\ket{00} - \\ket{11} \\big) \\\\\n",
    "\\ket{11}_B &=& \\frac{1}{\\sqrt{2}} \\big( \\ket{01} - \\ket{10} \\big) \\\\\n",
    "\\end{array}\n",
    "$$\n",
    "\n",
    "El circuito que efectúa una medida en la base de Bell será, por tanto\n",
    "\n",
    "$$\n",
    "\\ket{xy}_B \\to xy\n",
    "$$\n",
    "utiliza el *desentrelazador* \n",
    "\n",
    "$$U^\\dagger = ( \\hbox{CNOT}\\cdot H)^\\dagger = H\\cdot \\hbox{CNOT}$$ \n",
    "\n",
    "antes del medidor \n",
    "\n",
    "<br>\n",
    "\n",
    "\n",
    "::::{figure} images/Bell_meter.png\n",
    ":width: 400px\n",
    ":align: center\n",
    "\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 705.35x284.278 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jv/lqf3ggs56dz0wc8dtkz265440000gn/T/ipykernel_94565/1043122292.py:19: DeprecationWarning: The function ``qiskit.execute_function.execute()`` is deprecated as of qiskit 0.46.0. It will be removed in the Qiskit 1.0 release. This function combines ``transpile`` and ``backend.run``, which is covered by ``Sampler`` :mod:`~qiskit.primitives`. Alternatively, you can also run :func:`.transpile` followed by ``backend.run()``.\n",
      "  execute(qc,backend=M_simulator).result().get_counts()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'01': 1024}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def add_Bell_measurement(qc,qubits=[0,1]):\n",
    "    qc.cx(qubits[0],qubits[1])\n",
    "    qc.h(0)\n",
    "    qc.barrier()\n",
    "    qc.measure([0,1],[1,0])\n",
    "    \n",
    "'ahora verificamos'\n",
    "from qiskit import QuantumCircuit\n",
    "\n",
    "'creamos el circuito'\n",
    "qc = QuantumCircuit(2,2)\n",
    "\n",
    "'definimos la base de Bell'\n",
    "B00 = np.array([1,0,0,1]/np.sqrt(2))\n",
    "B01 = np.array([1,0,0,-1]/np.sqrt(2))\n",
    "B10 = np.array([0,1,1,0]/np.sqrt(2))\n",
    "B11 = np.array([0,1,-1,0]/np.sqrt(2))\n",
    "\n",
    "'inicializamos el estado de entrada en cualquiera de los estados anteriores'\n",
    "qc.initialize(B10,[0,1])\n",
    "\n",
    "'añadimos el medidor en la base de Bell\n",
    "add_Bell_measurement(qc,[0,1])\n",
    "display(qc.draw('mpl'))\n",
    "\n",
    "execute(qc,backend=M_simulator).result().get_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Valores esperados de observables multi-cúbit\n",
    "\n",
    "El *problema* esencial para medir un valor esperado $\\bra{\\psi} A \\ket{\\psi}$ es que, en general,  $A$ **no es un operador unitario**. Por tanto no se puede incluir como parte de un circuito\n",
    "\n",
    "Si pudiésemos expresar  como una combinación de operadores unitarios, $A = \\sum_i c_i U_i$, entonces sí podríamos calcular cadar valor esperado $\\langle U_i\\rangle$ mediante un circuito y, finalmente, componer el resultado $\\langle A\\rangle = \\sum_i c_i \\langle U_i\\rangle$\n",
    "\n",
    "Una base  la constituyen la *base de cadenas de Pauli*,  $U = \\sigma_{i_1}\\otimes \\ldots \\otimes \\sigma_{i_n}$ que son, a la vez, hermíticas y unitarias\n",
    "\n",
    "$$\n",
    "A = \\sum_{i_1,...,i_n=0}^3 a_{i_1\\ldots i_n} \\, \\sigma_{i_1}\\otimes \\ldots \\otimes \\sigma_{i_n}\n",
    "$$\n",
    "\n",
    "donde $\\sigma_i = (I,X,Y,Z)$. Por ejemplo, con $n=3$ \n",
    "\n",
    "$$\n",
    "\\sigma_2\\otimes \\sigma_0 \\otimes \\sigma_3 =  Y\\otimes I\\otimes Z \n",
    "$$\n",
    "\n",
    "los coeficientes se pueden obtener calculando las trazas\n",
    "\n",
    "$$\n",
    "a_{i_1\\ldots i_n} =\\frac{1}{2^n} \\tr (A \\,  \\sigma_{i_1}\\otimes \\ldots  \\otimes\\sigma_{i_n})\n",
    "$$\n",
    "\n",
    "\n",
    "Por tanto sólo tenemos que averiguar los valores esperados de cadenas de Pauli\n",
    "\n",
    "$$\n",
    "\\langle A \\rangle_{\\psi} =  \\sum_{i_1,...,i_n=0}^3 a_{i_1\\ldots i_n} \\langle \\sigma_{i_1}\\otimes \\ldots   \\otimes\\sigma_{i_n}\\rangle\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\n",
       "YIZ =\n",
       "\\begin{bmatrix}\n",
       "0 & 0 & 0 & 0 & - i & 0 & 0 & 0  \\\\\n",
       " 0 & 0 & 0 & 0 & 0 & i & 0 & 0  \\\\\n",
       " 0 & 0 & 0 & 0 & 0 & 0 & - i & 0  \\\\\n",
       " 0 & 0 & 0 & 0 & 0 & 0 & 0 & i  \\\\\n",
       " i & 0 & 0 & 0 & 0 & 0 & 0 & 0  \\\\\n",
       " 0 & - i & 0 & 0 & 0 & 0 & 0 & 0  \\\\\n",
       " 0 & 0 & i & 0 & 0 & 0 & 0 & 0  \\\\\n",
       " 0 & 0 & 0 & - i & 0 & 0 & 0 & 0  \\\\\n",
       " \\end{bmatrix}\n",
       "$$"
      ],
      "text/plain": [
       "<IPython.core.display.Latex object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a_203 =  (0.011239429934946407+0.08983401338507241j)\n"
     ]
    }
   ],
   "source": [
    "' Matrices de Pauli'\n",
    "s0 = np.matrix([[1,0],[0,1]]) # matriz identidad\n",
    "s1 = np.matrix([[0,1],[1,0]])\n",
    "s2 = np.matrix([[0,-1j],[1j,0]])\n",
    "s3 = np.matrix([[1,0],[0,-1]])\n",
    "\n",
    "Pauli_basis = [s0,s1,s2,s3]\n",
    "\n",
    "' Cadena de Pauli YIZ = s2s0s3' \n",
    "Pauli_string_203 = np.kron(s2,np.kron(s0,s3))\n",
    "display(array_to_latex(Pauli_string_203,prefix='YIZ ='))\n",
    "\n",
    "'Matriz arbitraria'\n",
    "A = np.random.rand(8,8) + 1j* np.random.rand(8,8)\n",
    "\n",
    "'Proyección'\n",
    "a_203 = np.trace(np.dot(A,Pauli_string_203))/2**3\n",
    "\n",
    "print('a_203 = ', a_203)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Valores esperados de cadenas de Pauli\n",
    "\n",
    "Veamos cómo calcular el valor esperado siguiente\n",
    "\n",
    "$$\n",
    "\\langle Z\\otimes Z\\otimes Z\\rangle_\\Psi  = \\bra{\\Psi}   Z\\otimes Z\\otimes Z \\ket{\\Psi}\n",
    "$$\n",
    "\n",
    "Dado que $Z\\ket{i} = (-1)^i\\ket{i}$ donde $i=0,1$, entonces, sobre un estado $\\ket{i_2 i_1 i_0}$ de la base computacional\n",
    "\n",
    "$$\n",
    "\\begin{array}{rcl}\n",
    "Z\\otimes Z\\otimes Z \\ket{i_2 i_1 i_0} &=& Z\\ket{i_2}\\otimes Z\\ket{i_1}\\otimes Z\\ket{i_0} \\\\ \\rule{0mm}{8mm}\n",
    "&=& \n",
    "(-1)^{i_2}\\ket{i_2}\\otimes(-1)^{i_1}\\ket{i_1}\\otimes(-1)^{i_0}\\ket{i_0} \\\\ \\rule{0mm}{8mm}\n",
    "&=&(-1)^{i_2+i_1+i_0}\\ket{i_2 i_1 i_0}\n",
    "\\end{array}\n",
    "$$\n",
    "\n",
    "entonces el valor esperado  de este operador es\n",
    "\n",
    "$$\n",
    "\\begin{array}{rcl}\n",
    "\\langle  Z\\otimes Z\\otimes Z\\rangle_\\Psi &=&\n",
    "\\bra{\\Psi} Z\\otimes Z\\otimes Z \\ket{\\Psi} \\\\ \n",
    "&=& \\sum_{i_2,i_1,i_0=0,1}\\bra{\\Psi} Z\\otimes Z\\otimes Z \\ket{i_2 i_1 i_0}\\braket{i_2 i_1 i_0}{\\Psi}  \\rule{0mm}{10mm}  \\\\ \\rule{0mm}{10mm}\n",
    "&=& \\sum_{i_2,i_1,i_0=0,1}(-1)^{i_2 + i_1 + i_0}\\big|\\bra{i_2 i_1 i_0}\\Psi\\rangle\\big|^2 \\\\ \\rule{0mm}{10mm}\n",
    "&=& \\sum_{i_2,i_1,i_0=0,1} (-1)^{i_2 + i_1 + i_0} p(i_2,i_1,i_0) \\nonumber\\\\ \n",
    "\\end{array}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Vamos a hallar $\\langle Z\\otimes Z\\otimes Z\\rangle_\\Psi $ en el siguiente estado\n",
    "\n",
    "$$\n",
    "|\\Psi> = \\frac{i}{4}|000>+\\frac{1}{\\sqrt{8}}|001>+\\frac{1+i}{4}|010>+\\frac{1+2i}{\\sqrt{8}}|101>+\\frac{1}{4}|110>\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 807.596x367.889 with 1 Axes>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "' estado normalizado '\n",
    "psi =np.array([1.,-2*1J, -2,1,1J,0,2,-1])\n",
    "psi/=tQ.norm(psi)\n",
    "\n",
    "\n",
    "Statevector(psi).draw('latex')\n",
    "\n",
    "qr = QuantumRegister(3)\n",
    "cr = ClassicalRegister(3)\n",
    "qc = QuantumCircuit(qr,cr)\n",
    "\n",
    "from qiskit.extensions import Initialize\n",
    "\n",
    "qc.initialize(psi, qr)\n",
    "qc.measure(qr,cr)\n",
    "qc.draw(output='mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Ejecutamos el circuito un número de veces y obtenemos el diccionario de cuentas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'110': 2438, '100': 591, '001': 2533, '111': 658, '011': 651, '000': 570, '010': 2559}\n"
     ]
    }
   ],
   "source": [
    "shots=10000\n",
    "\n",
    "counts = AerSimulator().run(qc,shots=shots).result().get_counts()\n",
    "print(counts)\n",
    "\n",
    "#from qiskit.tools.visualization import plot_histogram\n",
    "#plot_histogram(counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Finamente $\\langle ZZZ\\rangle $ es el valor medio  de una distribución de probabilidad de la forma $\\{\\lambda(x),p(x)\\},$ con $x=(i_2 i_1 i_0)$ y\n",
    "\n",
    "$$\n",
    "\\lambda(x) = (-1)^{i_{2}+i_1+i_0}~~~~~~,~~~~~~ p(x)= \\frac{n(x)}{\\sum_x n(x)} \n",
    "$$\n",
    "\n",
    "La media será el valor esperado que buscamos\n",
    "\n",
    "$$\n",
    " \\langle ZZZ\\rangle = \\bar \\lambda = \\sum_x \\lambda(x) p(x) = \\sum_{x}(-1)^{i_{2}+i_1+i_0}\\frac{n(x)}{\\sum_x n(x)} \n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "run_control": {
     "marked": false
    },
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<ZZZ> = -0.02682\n"
     ]
    }
   ],
   "source": [
    "mean = 0\n",
    "for bitstring,count  in counts.items():\n",
    "    mean += (-1)**(sum([int(bit) for bit in bitstring])) * count/nshots \n",
    "\n",
    "print('<ZZZ> =', np.round(mean,5) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check with the analytic expression $\\bra{\\psi} ZZZ\\ket{\\psi} $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.25+0j)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Z = np.array([[1,0],[0,-1]])\n",
    "ZZZ = np.kron(Z,np.kron(Z,Z))\n",
    "tQ.braket(psi,np.dot(ZZZ,psi))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "También podemos obtener la varianza\n",
    "\n",
    "$$\n",
    "\\sigma^2 = \\sum_{x}\\left((-1)^{i_{2}+i_1+i_0}-\\bar\\lambda \\right)^2 p(x)\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sigma =  0.9691377041473518\n"
     ]
    }
   ],
   "source": [
    "variance=0\n",
    "for bitstring,count  in counts.items():\n",
    "    variance += ((-1)**(sum([int(bit) for bit in bitstring]))-mean)**2 * count/nshots \n",
    "    \n",
    "print('sigma = ', np.sqrt(variance) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Igualmente podemos ver cómo medir el valor esperado\n",
    "\n",
    "$$\n",
    "\\langle Z\\otimes X\\otimes Y\\rangle_\\Psi  = \\bra{\\Psi}   Z\\otimes X\\otimes Y \\ket{\\Psi}\n",
    "$$\n",
    "\n",
    "en el mismo estado\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 825.422x367.889 with 1 Axes>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qr = QuantumRegister(3)\n",
    "cr = ClassicalRegister(3)\n",
    "qc = QuantumCircuit(qr,cr)\n",
    "\n",
    "from qiskit.extensions import Initialize\n",
    "\n",
    "qc.initialize(psi, qr)\n",
    "add_multimeasure_XYZ(qc,'ZXY')\n",
    "qc.draw(output='mpl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'101': 6186, '010': 3115, '000': 15708, '001': 3110, '100': 12499, '110': 6220, '011': 40617, '111': 12545}\n",
      "<ZXY> = 0.37462\n"
     ]
    }
   ],
   "source": [
    "counts = execute(qc,M_backend,shots=shots).result().get_counts()\n",
    "print(counts)\n",
    "\n",
    "mean = 0\n",
    "for bitstring,count  in counts.items():\n",
    "    mean += (-1)**(sum([int(bit) for bit in bitstring])) * count/nshots \n",
    "\n",
    "print('<ZXY> =', np.round(mean,5) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "<br>\n",
    "Escribe una función $expval\\_pauli(P,u)$ que reciba como dato, un estado $\\ket{u}\\in \\Hil^{\\otimes n}$ y una cadena $P = 'IXYZZ...'$ que represente un operador de Pauli múltiple,  y  devuelva el valor esperado $\\bra{u}P\\ket{u}$.\n",
    "    \n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "    \n",
    "Escribe una función $expect\\_value$ que reciba como argumento un estado $\\ket{\\psi}$ y un observable $A$, definidos  sobre $\\Hil^{\\otimes n}$ y devuelva el valor esperado $\\bra{\\psi}A\\ket{\\psi}$. Tendrás que generar todas las cadenas de Pauli de longitud $n$. \n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "    \n",
    "Considera el hamiltoniano $H=\\lambda (X X+Y Y+Z Z)$ siendo $\\lambda =1.47\\cdot 10^{-6}eV$. \n",
    " Calcular el valor esperado de la energía $E = \\langle H\\rangle_\\Psi$  en los cuatro estados de Bell\n",
    "$\\ket{\\Psi} = \\ket{B_{ij}}$. \n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "### Medida de Hadamard"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Al final, el valor esperado de un operador es un simple número que se obtiene a partir de una distribución aleatoria de valores. \n",
    "¿No podríamos diseñar una variable aleatoria cuyo valor medio coincida con ese resultado? \n",
    "La medida de Hadamard hace precisamente esto aprovechando el entrelazamiento. \n",
    "\n",
    "Consideremos el siguiente circuito\n",
    "\n",
    "\n",
    "::::{figure} images/Hadamard_measure.png\n",
    ":width: 280px\n",
    ":align: center\n",
    "\n",
    "::::\n",
    "\n",
    "\n",
    "El aparato de medida sólo registra valores $\\{0,1\\}$ como resultado de las medidas proyectivas sobre $\\ket{\\pm}$. Supongamos que medimos con el observable $X$. El promedio \n",
    "\n",
    "$$\n",
    "p_{0}-p_{1} = \\frac{n_{0}}{N} - \\frac{n_{1}}{N} = \\langle X\\rangle_{ancilla}\n",
    "$$\n",
    "\n",
    "es el valor esperado de $X$ en la ancilla. Análogamente, será $\\langle Y\\rangle_{ancilla}$  si usamos el observable $Y$.  \n",
    "\n",
    "Vamos a demostrar el siguiente resultado que relaciona este número con el valor esperado de $U$ en el estado $\\ket{\\psi}$\n",
    "\n",
    "::::::{card} \n",
    "<b>Teorema</b>:  \n",
    "\n",
    "^^^\n",
    "<br>\n",
    "$$\n",
    "\\langle X\\rangle_{ancilla} = {\\rm Re} \\langle U\\rangle_{\\psi} ~~~,~~~ \\langle Y\\rangle_{ancilla} = {\\rm Im} \\langle U\\rangle_{\\psi}\\, \n",
    "$$\n",
    "::::::\n",
    "\n",
    "**Demostración**: para el caso $x$, el circuito anterior será\n",
    "<br>\n",
    "\n",
    "::::{figure} images/Hadamard_measurea.png\n",
    ":width: 280px\n",
    ":align: center\n",
    "\n",
    "::::\n",
    "\n",
    "<br>\n",
    "\n",
    "\n",
    "Un cálculo explícito nos da el estado que llega al aparato de medida\n",
    "<br>\n",
    "\n",
    "$$\n",
    "\\ket{0}\\ket{\\psi} ~\\to ~ \\ket{\\Psi} = \\frac{1}{2} \\left[\\rule{0mm}{3mm} |0\\rangle \\otimes (1 + U) |\\psi\\rangle +  |1\\rangle \\otimes (1 - U) |\\psi\\rangle \\right] \\label{hadam}\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Si medimos el cúbit ancilla, obtendremos como resultados $\\{0,1\\}$ con probabilidades \n",
    "\n",
    "\\begin{eqnarray*} \n",
    " p_{0}  &=&  \\left\\vert \\frac{1}{2}  (1 + U) \\ket{\\psi}  \\right\\vert^{2} = \n",
    " \\frac{1}{4}\\bra{\\psi}(1 + U^\\dagger) (1 + U) \\ket{\\psi} =\\frac{1}{2}(1+\\operatorname{Re}\\langle \\psi|U|\\psi\\rangle) \\nonumber\\\\\n",
    " p_{1}  &=&  \\left\\vert \\frac{1}{2}  (1 - U) \\ket{\\psi}  \\right\\vert^{2}=\n",
    " \\frac{1}{4}\\bra{\\psi}(1 - U^\\dagger) (1 - U) \\ket{\\psi} =\n",
    " \\frac{1}{2}(1-\\operatorname{Re}\\langle \\psi|U|\\psi\\rangle) \\nonumber\n",
    "\\end{eqnarray*}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "El número $ p_{0} - p_{1}$ es el valor esperado de $\\langle X\\rangle $ en el estado de la ancilla justo  antes de la barrera. Encontramos el siguiente resultado \n",
    "\n",
    "$$\n",
    "\\langle{X}\\rangle_{ancilla}  =  \\hbox{Re}\\bra{\\psi} U \\ket{\\psi}\n",
    "$$\n",
    "\n",
    "Supongamos ahora que medimos en la base $Y$, es decir, con el circuito siguiente.\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "::::{figure} images/Hadamard_measureb.png\n",
    ":width: 400px\n",
    ":align: center\n",
    "\n",
    "::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "    \n",
    "    \n",
    "Verificar que la parte imaginaria viene de medir  $\\langle Y\\rangle$ en la ancilla\n",
    "\n",
    "$$\n",
    "\\langle{Y}\\rangle_{ancilla}  =  \\hbox{Im}\\bra{\\psi} U \\ket{\\psi} \\, .\n",
    "$$\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "    \n",
    "Obtener el valor esperado de $\\langle Z\\otimes Z\\otimes Z\\rangle_\\Psi$ en el estado \n",
    "\n",
    "$$\n",
    "|\\psi> = \\frac{i}{4}|000>+\\frac{1}{\\sqrt{8}}|001>+\\frac{1+i}{4}|010>+\\frac{1+2i}{\\sqrt{8}}|101>+\\frac{1}{4}|110>\n",
    "$$\n",
    "\n",
    "usando el método de Hadamard.\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Generamos el circuito de medida de Hadamard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1014.07x451.5 with 1 Axes>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qiskit import QuantumRegister, QuantumCircuit, ClassicalRegister\n",
    "\n",
    "qr = QuantumRegister(3, name = 'qr')\n",
    "qra = QuantumRegister(1, name = 'ancilla')\n",
    "cr = ClassicalRegister(1)\n",
    "\n",
    "'creamos el operador como una puerta \"gate\" que admite el método \"control'\n",
    "qc0 = QuantumCircuit(qr)\n",
    "qc0.z(qr)\n",
    "CZZZ_gate = qc0.to_gate().control(1,ctrl_state= 1) \n",
    "\n",
    "'creamos el circuito con el operador controlado'\n",
    "qc_Had = QuantumCircuit(qra,qr,cr)\n",
    "qc_Had.initialize(psi,qr)\n",
    "qc_Had.h(qra)  \n",
    "qc_Had.append(CZZZ_gate,qra[:] + qr[:])\n",
    "qc_Had.sdg(qra)\n",
    "qc_Had.h(qra)\n",
    "qc_Had.measure(qra,cr)\n",
    "\n",
    "qc_Had.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "Ejecutamos y obtenemos el valor esperado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'0': 499847, '1': 500153}\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x500 with 1 Axes>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M_backend = Aer.get_backend('qasm_simulator')\n",
    "shots=1000000\n",
    "\n",
    "cuentas_Had= execute(qc_Had,M_backend,shots=shots).result().get_counts()\n",
    "print(cuentas_Had)\n",
    "\n",
    "from qiskit.tools.visualization import plot_histogram\n",
    "plot_histogram(cuentas_Had)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "val_esp_sigma(cuentas_Had)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "::::::{admonition} Ejercicio\n",
    ":class: tip\n",
    "\n",
    "    \n",
    "Define una función <i>add_Hadamadard_measure</i> que reciba un circuito y una  cadena de Pauli y añada al circuito el medidor de Hadamard asociado.\n",
    "::::::\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "#### Proyección de Hadamard\n",
    "\n",
    "Supongamos el operador $U$ es un operador sobre 1 cúbit *a la vez hermítico y unitario*.\n",
    "\n",
    "Por tanto puede ser considerado, a la vez,\n",
    "\n",
    "- un observable con autovalores reales  $\\lambda = \\pm1$ y \n",
    "\n",
    "- una puerta cuántica con autovalores de módulo unidad\n",
    "\n",
    "Ello deja a $\\lambda = \\pm 1$ como los únicos autovalores posibles para un operador así. \n",
    "Los operadores $X,Y,Z$ y $H$ son ejemplos de ello. \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Denominemos $\\ket{a}_U, \\, a=0,1$  los autovectores de $U$ con autovalores $(-1)^a$, es decir $U\\ket{a}_U = (-1)^a\\ket{a}_U$. \n",
    "\n",
    "En este caso, los factores $(1\\pm U)$ que aparecen en la medida de Hadamard son proyectores ortogonales sobre los autoestados de $U$\n",
    "\n",
    "\n",
    "\n",
    "<br>\n",
    "::::{figure} images/HadamardProjection.png\n",
    ":width: 280px\n",
    ":align: center\n",
    "\n",
    "::::\n",
    "<br>\n",
    "\n",
    "\n",
    "La imagen bajo este circuito de un estado de entrada $\\ket{0}\\ket{\\psi}$ ahora será\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "$$\n",
    "\\ket{0}\\ket{\\psi} = \\ket{0}\\otimes (\\alpha\\ket{0}_U + \\beta\\ket{1}_U) ~~\\longrightarrow ~~  \\alpha\\ket{0}\\ket{0}_U +  \\beta\\ket{1}\\ket{1}_U\\, .\n",
    "$$\n",
    "<br>\n",
    "\n",
    "Al igual que con los estados de Bell, cada resultado de  medida en la ancilla está correlacionado con un autoestado del operador $U$. \n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "nbTranslate": {
   "displayLangs": [
    "*"
   ],
   "hotkey": "alt-t",
   "langInMainMenu": true,
   "sourceLang": "en",
   "targetLang": "fr",
   "useGoogleTranslate": true
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "414.053px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
